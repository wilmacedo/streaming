// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/grpc.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	FindUser(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*User, error)
	StreamUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_StreamUsersClient, error)
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserResponse, error)
	FindMusic(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Music, error)
	StreamMusics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_StreamMusicsClient, error)
	ListMusics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMusicResponse, error)
	FindPlaylist(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Playlist, error)
	StreamPlaylists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_StreamPlaylistsClient, error)
	ListPlaylists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPlaylistResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) FindUser(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/API/FindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StreamUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_StreamUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], "/API/StreamUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type aPIStreamUsersClient struct {
	grpc.ClientStream
}

func (x *aPIStreamUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/API/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FindMusic(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Music, error) {
	out := new(Music)
	err := c.cc.Invoke(ctx, "/API/FindMusic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StreamMusics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_StreamMusicsClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], "/API/StreamMusics", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamMusicsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamMusicsClient interface {
	Recv() (*Music, error)
	grpc.ClientStream
}

type aPIStreamMusicsClient struct {
	grpc.ClientStream
}

func (x *aPIStreamMusicsClient) Recv() (*Music, error) {
	m := new(Music)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) ListMusics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMusicResponse, error) {
	out := new(ListMusicResponse)
	err := c.cc.Invoke(ctx, "/API/ListMusics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FindPlaylist(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, "/API/FindPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StreamPlaylists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (API_StreamPlaylistsClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[2], "/API/StreamPlaylists", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamPlaylistsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_StreamPlaylistsClient interface {
	Recv() (*Playlist, error)
	grpc.ClientStream
}

type aPIStreamPlaylistsClient struct {
	grpc.ClientStream
}

func (x *aPIStreamPlaylistsClient) Recv() (*Playlist, error) {
	m := new(Playlist)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) ListPlaylists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListPlaylistResponse, error) {
	out := new(ListPlaylistResponse)
	err := c.cc.Invoke(ctx, "/API/ListPlaylists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	FindUser(context.Context, *FindRequest) (*User, error)
	StreamUsers(*emptypb.Empty, API_StreamUsersServer) error
	ListUsers(context.Context, *emptypb.Empty) (*ListUserResponse, error)
	FindMusic(context.Context, *FindRequest) (*Music, error)
	StreamMusics(*emptypb.Empty, API_StreamMusicsServer) error
	ListMusics(context.Context, *emptypb.Empty) (*ListMusicResponse, error)
	FindPlaylist(context.Context, *FindRequest) (*Playlist, error)
	StreamPlaylists(*emptypb.Empty, API_StreamPlaylistsServer) error
	ListPlaylists(context.Context, *emptypb.Empty) (*ListPlaylistResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) FindUser(context.Context, *FindRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (UnimplementedAPIServer) StreamUsers(*emptypb.Empty, API_StreamUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUsers not implemented")
}
func (UnimplementedAPIServer) ListUsers(context.Context, *emptypb.Empty) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAPIServer) FindMusic(context.Context, *FindRequest) (*Music, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMusic not implemented")
}
func (UnimplementedAPIServer) StreamMusics(*emptypb.Empty, API_StreamMusicsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMusics not implemented")
}
func (UnimplementedAPIServer) ListMusics(context.Context, *emptypb.Empty) (*ListMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMusics not implemented")
}
func (UnimplementedAPIServer) FindPlaylist(context.Context, *FindRequest) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPlaylist not implemented")
}
func (UnimplementedAPIServer) StreamPlaylists(*emptypb.Empty, API_StreamPlaylistsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPlaylists not implemented")
}
func (UnimplementedAPIServer) ListPlaylists(context.Context, *emptypb.Empty) (*ListPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlaylists not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FindUser(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StreamUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamUsers(m, &aPIStreamUsersServer{stream})
}

type API_StreamUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type aPIStreamUsersServer struct {
	grpc.ServerStream
}

func (x *aPIStreamUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _API_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FindMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FindMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/FindMusic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FindMusic(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StreamMusics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamMusics(m, &aPIStreamMusicsServer{stream})
}

type API_StreamMusicsServer interface {
	Send(*Music) error
	grpc.ServerStream
}

type aPIStreamMusicsServer struct {
	grpc.ServerStream
}

func (x *aPIStreamMusicsServer) Send(m *Music) error {
	return x.ServerStream.SendMsg(m)
}

func _API_ListMusics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListMusics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/ListMusics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListMusics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FindPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FindPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/FindPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FindPlaylist(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StreamPlaylists_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).StreamPlaylists(m, &aPIStreamPlaylistsServer{stream})
}

type API_StreamPlaylistsServer interface {
	Send(*Playlist) error
	grpc.ServerStream
}

type aPIStreamPlaylistsServer struct {
	grpc.ServerStream
}

func (x *aPIStreamPlaylistsServer) Send(m *Playlist) error {
	return x.ServerStream.SendMsg(m)
}

func _API_ListPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/ListPlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListPlaylists(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUser",
			Handler:    _API_FindUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _API_ListUsers_Handler,
		},
		{
			MethodName: "FindMusic",
			Handler:    _API_FindMusic_Handler,
		},
		{
			MethodName: "ListMusics",
			Handler:    _API_ListMusics_Handler,
		},
		{
			MethodName: "FindPlaylist",
			Handler:    _API_FindPlaylist_Handler,
		},
		{
			MethodName: "ListPlaylists",
			Handler:    _API_ListPlaylists_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUsers",
			Handler:       _API_StreamUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMusics",
			Handler:       _API_StreamMusics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPlaylists",
			Handler:       _API_StreamPlaylists_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/grpc.proto",
}
